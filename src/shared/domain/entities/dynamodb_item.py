from dataclasses import dataclass


@dataclass
class DynamodbItem:
    pk: str
    sk: str
    gsi1_pk: str | None = None
    gsi1_sk: str | None = None

    @property
    def has_parent(
        self,
    ):
        return self.gsi1_pk is not None

    @classmethod
    def from_dict(cls, pk: str, gsi1_pk: str = None):
        """
        Because pk and sk must be the same, and pk value is auto generated by uuid4
        function, we don't need to set the sk parameter value.
        Idem for gsi1_pk and gsi1_sk values.

        Args:
            pk (str): _description_
            gsi1_pk (str | None): _description_

        Returns:
            DynamodbItem: _description_
        """

        return cls(
            pk=pk,
            sk=pk,
            gsi1_pk=gsi1_pk if gsi1_pk is not None else None,
            gsi1_sk=pk if gsi1_pk is not None else None,
        )

    def to_dict(self, origin: dict):

        item = {
            "pk": self.pk,
            "sk": self.sk,
        }

        if self.has_parent:
            item["gsi1_pk"] = self.gsi1_pk
            item["gsi1_sk"] = self.gsi1_sk

        return item | origin
